
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "zipfextR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('zipfextR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("moezipf")
> ### * moezipf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: moezipf
> ### Title: The Marshal-Olkin Extended Zipf Distribution (MOEZipf).
> ### Aliases: moezipf dmoezipf dmoezipf pmoezipf qmoezipf rmoezipf
> 
> ### ** Examples
> 
> dmoezipf(1:10, 2.5, 1.3)
 [1] 0.692552701 0.153501174 0.058638885 0.029165430 0.016876645 0.010768060
 [7] 0.007355359 0.005283237 0.003944113 0.003035699
> pmoezipf(1:10, 2.5, 1.3)
 [1] 0.6925527 0.8460539 0.9046928 0.9338582 0.9507348 0.9615029 0.9688583
 [8] 0.9741415 0.9780856 0.9811213
> qmoezipf(0.56, 2.5, 1.3)
[1] 1
> rmoezipf(10, 2.5, 1.3)
 [1] 1 1 1 4 1 3 5 1 1 1
> 
> 
> 
> 
> cleanEx()
> nameEx("moezipfFit")
> ### * moezipfFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: moezipfFit
> ### Title: MOEZipf parameters estimation.
> ### Aliases: moezipfFit residuals.moezipfR fitted.moezipfR coef.moezipfR
> ###   plot.moezipfR print.moezipfR summary.moezipfR logLik.moezipfR
> ###   AIC.moezipfR BIC.moezipfR
> 
> ### ** Examples
> 
> data <- rmoezipf(100, 2.5, 1.3)
> data <- as.data.frame(table(data))
> data[,1] <- as.numeric(data[,1])
> initValues <- moezipf_getInitialValues(data)
> obj <- moezipfFit(data, init_alpha = initValues$init_alpha, init_beta = initValues$init_beta)
> 
> 
> 
> cleanEx()
> nameEx("moezipfMean")
> ### * moezipfMean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: moezipfMean
> ### Title: Expected value.
> ### Aliases: moezipfMean
> 
> ### ** Examples
> 
> moezipfMean(2.5, 1.3)
[1] 2.106573
> moezipfMean(2.5, 1.3, 10^(-3))
[1] 2.002115
> 
> 
> 
> cleanEx()
> nameEx("moezipfMoments")
> ### * moezipfMoments
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: moezipfMoments
> ### Title: Distribution Moments.
> ### Aliases: moezipfMoments
> 
> ### ** Examples
> 
> moezipfMoments(3, 4.5, 1.3)
[1] 2.805115
> moezipfMoments(3, 4.5, 1.3,  1*10^(-3))
[1] 2.682366
> 
> 
> 
> cleanEx()
> nameEx("moezipfVariance")
> ### * moezipfVariance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: moezipfVariance
> ### Title: Variance of the MOEZipf distribution.
> ### Aliases: moezipfVariance
> 
> ### ** Examples
> 
> moezipfVariance(3.5, 1.3)
[1] 1.057449
> 
> 
> 
> cleanEx()
> nameEx("moezipf_getInitialValues")
> ### * moezipf_getInitialValues
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: moezipf_getInitialValues
> ### Title: Calculates initial values for the alpha and beta parameters.
> ### Aliases: moezipf_getInitialValues
> 
> ### ** Examples
> 
> data <- rmoezipf(100, 2.5, 1.3)
> data <- as.data.frame(table(data))
> initials <- moezipf_getInitialValues(data)
> 
> 
> 
> cleanEx()
> nameEx("zipfpe")
> ### * zipfpe
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zipfpe
> ### Title: The Zipf-Poisson Extreme Distribution (Zipf-PE).
> ### Aliases: zipfpe dzipfpe dzipfpe pzipfpe qzipfpe rzipfpe
> 
> ### ** Examples
> 
> dzipfpe(1:10, 2.5, -1.5)
 [1] 0.866451365 0.075466513 0.023900888 0.011036529 0.006146268 0.003833162
 [7] 0.002579659 0.001833866 0.001358768 0.001039883
> pzipfpe(1:10, 2.5, -1.5)
 [1] 0.8664514 0.9419179 0.9658188 0.9768553 0.9830016 0.9868347 0.9894144
 [8] 0.9912482 0.9926070 0.9936469
> qzipfpe(0.56, 2.5, 1.3)
[1] 1
> rzipfpe(10, 2.5, 1.3)
 [1] 1 1 1 4 1 4 6 2 2 1
> 
> 
> 
> 
> cleanEx()
> nameEx("zipfpeFit")
> ### * zipfpeFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zipfpeFit
> ### Title: Zipf-PE parameters estimation.
> ### Aliases: zipfpeFit residuals.zipfpeR fitted.zipfpeR coef.zipfpeR
> ###   plot.zipfpeR print.zipfpeR summary.zipfpeR logLik.zipfpeR AIC.zipfpeR
> ###   BIC.zipfpeR
> 
> ### ** Examples
> 
> data <- rzipfpe(100, 2.5, 1.3)
> data <- as.data.frame(table(data))
> data[,1] <- as.numeric(data[,1])
> obj <- zipfpeFit(data, 1.1, 0.1)
> 
> 
> 
> cleanEx()
> nameEx("zipfpeMean")
> ### * zipfpeMean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zipfpeMean
> ### Title: Expected value of the Zipf-PE distribution.
> ### Aliases: zipfpeMean
> 
> ### ** Examples
> 
> zipfpeMean(2.5, 1.3)
[1] 2.481475
> zipfpeMean(2.5, 1.3, 10^(-3))
[1] 2.353121
> 
> 
> 
> cleanEx()
> nameEx("zipfpeMoments")
> ### * zipfpeMoments
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zipfpeMoments
> ### Title: Distribution Moments.
> ### Aliases: zipfpeMoments
> 
> ### ** Examples
> 
> zipfpeMoments(3, 4.5, 1.3)
[1] 3.483101
> zipfpeMoments(3, 4.5, 1.3,  1*10^(-3))
[1] 3.332075
> 
> 
> 
> cleanEx()
> nameEx("zipfpeVariance")
> ### * zipfpeVariance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zipfpeVariance
> ### Title: Variance of the Zipf-PE distribution.
> ### Aliases: zipfpeVariance
> 
> ### ** Examples
> 
> zipfpeVariance(3.5, 1.3)
[1] 1.431195
> 
> 
> 
> cleanEx()
> nameEx("zipfpssFit")
> ### * zipfpssFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zipfpssFit
> ### Title: Zipf-PSS parameters estimation.
> ### Aliases: zipfpssFit residuals.zipfpssR fitted.zipfpssR coef.zipfpssR
> ###   plot.zipfpssR print.zipfpssR summary.zipfpssR logLik.zipfpssR
> ###   AIC.zipfpssR BIC.zipfpssR
> 
> ### ** Examples
> 
> data <- rzipfpss(100, 2.5, 1.3)
> data <- as.data.frame(table(data))
> data[,1] <- as.numeric(data[,1])
> obj <- zipfpssFit(data, 1.1, 0.1)
> 
> 
> 
> cleanEx()
> nameEx("zipfpssMean")
> ### * zipfpssMean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zipfpssMean
> ### Title: Expected value of the Zipf-PSS distribution.
> ### Aliases: zipfpssMean
> 
> ### ** Examples
> 
> zipfpssMean(2.5, 1.3)
[1] 2.531584
> zipfpssMean(2.5, 1.3, TRUE)
[1] 3.479993
> 
> 
> 
> cleanEx()
> nameEx("zipfpssMoments")
> ### * zipfpssMoments
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zipfpssMoments
> ### Title: Distribution Moments.
> ### Aliases: zipfpssMoments
> 
> ### ** Examples
> 
> zipfpssMoments(1, 2.5, 2.3)
[1] 4.370142
> zipfpssMoments(1, 2.5, 2.3, TRUE)
[1] 4.857111
> 
> 
> 
> cleanEx()
> nameEx("zipfpssVariance")
> ### * zipfpssVariance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zipfpssVariance
> ### Title: Variance of the Zipf-PSS distribution.
> ### Aliases: zipfpssVariance
> 
> ### ** Examples
> 
> zipfpssVariance(4.5, 2.3)
[1] 2.92538
> zipfpssVariance(4.5, 2.3, TRUE)
[1] 2.503667
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.837 0.199 4.067 0.001 0.001 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
